[[snippets]]
  description = "Check what listenes on a port netstat"
  command = "sudo netstat -pnltu | grep PORT?"
  output = ""

[[snippets]]
  description = "Docker watchtower to update images or all running contianers to their newest versions"
  command = "docker run --rm --name Watchtower -e WATCHTOWER_CLEANUP=true -e WATCHTOWER_DEBUG=true -e WATCHTOWER_INCLUDE_STOPPED=true -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --run-once"
  output = ""

[[snippets]]
  description = "Get encoded csr in a proper format"
  command = "cat <csr=myuser.csr> | base64 | tr -d \"\\n\""
  tag = ["kubernetes", "kubectl"]
  output = "Token ready to be pasted in the token field of Kubernetes dashboard for example."

[[snippets]]
  description = "Upgrade single package to newest version"
  command = "sudo apt --only-upgrade install <package>"
  tag = ["linux,", "apt,", "upgrade"]
  output = ""

[[snippets]]
  description = "Find zsh alias by name, first result usually list file where alias originates from"
  command = "zsh -ixc : 2>&1 | rg <alias=alias> -B 5"
  tag = ["linux,", "command line"]
  output = "Top has files with possible aliases"

[[snippets]]
  description = "Copy path to a file to the clipboard"
  command = "xsel <<(readlink -fn"
  output = "Path to a file copied to clipboard"

[[snippets]]
  description = "Git show all changes commits to a file, helpful for tracking changes"
  command = "git log --follow --stat -p -- "
  tag = ["git,", "commit"]
  output = ""

[[snippets]]
  description = "Check if branch is eligible for merge"
  command = "git merge --no-commit --no-ff <branch> && echo $? && git merge --abort"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Check git status of every directory in repos folder, assuming every directory is a git repo"
  command = "find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git fetch origin && git status -s && echo)' \\;"
  tag = ["git"]
  output = "If a directory is not a git repo, it will be ignored with a warrning and command will continue."

[[snippets]]
  description = "Git check unpushed commits in every local repo folder in dev"
  command = "find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git log --branches --not --remotes && echo)' \\;"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Git list branches not merged with origin main"
  command = "git branch --no-merged origin/main"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Git list branches merged with origin main"
  command = "git branch --merged origin/main"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Paste content copied from clipboard to a file"
  command = "xclip -o -sel clipboard >> "
  output = ""

[[snippets]]
  description = "Linux fix errors when installing something with apt"
  command = "sudo dpkg --configure -a"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Git find deleted files and show their commits. Helpful when need to undelete a file."
  command = "git log --diff-filter=D --summary | grep -E 'delete|^commit\\s+\\S+'"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "List all make targets"
  command = "make -qp | awk -F':' '/^[a-zA-Z0-9][^$#\\/\\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | sort -u"
  output = ""

[[snippets]]
  description = "Paste yaml from clipboard and apply with kubectl"
  command = "xclip -o -sel clipboard | kubectl apply -f -"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "Fix git gpg failed to sign data on mac"
  command = "export GPG_TTY=$(tty)"
  tag = ["gpg"]
  output = ""

[[snippets]]
  description = "Search git commit history content"
  command = "git log -p --all -G '"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Reformat a file with 1 space between words and 2 spaces between paragraphs. Helpful when limiting text width to 80 for PR reviews"
  command = "fmt -u FILE?"
  output = ""

[[snippets]]
  description = "Create script to run at startup, update rc.local and run this command"
  command = "update-rc.d rc.local defaults 80"
  output = ""

[[snippets]]
  description = "Link to SSH Cheat Sheet"
  command = "xdg-open https://www.marcobehler.com/guides/ssh-cheat-sheet"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Git compare diff between main and current branch"
  command = "git diff main...$(git branch | sed -n -e 's/^\\* \\(.*\\)/\\1/p')"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Link to Vim fix for go files when folds are closed on save"
  command = "xdg-open https://stackoverflow.com/a/55327996"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Apt ubuntu remove ppa from the repositories"
  command = "sudo add-apt-repository --remove ppa:NAME?"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Generate random password and copy to clipboard"
  command = "apg -M SNCL -m 22 | fzf | xsel -ib"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Vim generate ctags exuberant tags"
  command = "ctags -R --exclude=.git--exclude=vendor --exclude=node_modules --exclude=db --exclude=log ."
  tag = ["nvim"]
  output = ""

[[snippets]]
  description = "Link to At reminder times table, formats execution"
  command = "xdg-open https://www.dummies.com/article/technology/computers/operating-systems/linux/how-to-schedule-jobs-in-linux-at-and-crontab-commands-255842/\\#:\\~:text\\=Formats%20for%20the%20at%20Command%20for%20the%20Time%20of%20Execution"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Modify access for a specific user to a file or folder using ACL access control list, setfacl"
  command = "xdg-open https://superuser.com/a/145007"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to nvim lua guide"
  command = "xdg-open https://github.com/nanotee/nvim-lua-guide"
  tag = ["link", "nvim"]
  output = ""

[[snippets]]
  description = "Link to neovim folder structure"
  command = "xdg-open https://github.com/nanotee/nvim-lua-guide#runtime-files"
  tag = ["link", "nvim"]
  output = ""

[[snippets]]
  description = "Link to bash conditional operators"
  command = "https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#:~:text=6.4%20bash%20conditional%20expressions"
  tag = ["link", "nvim"]
  output = ""

[[snippets]]
  description = "SSH generate ecdsa key in the ssh folder"
  command = "ssh-keygen -t ecdsa -f ~/.ssh/argo_infra_rsa"
  output = ""

[[snippets]]
  description = "Fix sealed secret error cannot fetch certificate"
  command = "kubectl -n kube-system patch svc sealed-secrets-controller --type='json' -p='[{\"op\": \"remove\", \"path\": \"/spec/ports/0/name\"}, {\"op\": \"replace\", \"path\": \"/spec/ports/0/targetPort\", \"value\":8080}]'"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "Link to the taskwarrior possible due date fields"
  command = "xdg-open https://taskwarrior.org/docs/dates/\\#:\\~:text\\=here%20are%20the%20possible%20elements%20of%20rc.dateformat%3A"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Install newest version of up CLI"
  command = "curl -sL \"https://cli.upbound.io\" | sh && sudo mv up /usr/local/bin/"
  tag = ["upbound,", "cli"]
  output = ""

[[snippets]]
  description = "Git copy file from source branch to current branch"
  command = "git checkout ?SOURCE_BRANCH ?PATH_TO_FILE"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Add GCP official provider to providers cache for LSP to work. Crossplane.yaml must be in the same folder as composition/definition or in the root of the repo."
  command = "up xpkg dep xpkg.upbound.io/upbound/provider-gcp"
  tag = ["crossplane"]
  output = ""

[[snippets]]
  description = "Enable debugging in neovim for rust and go"
  command = "sudo apt install -y lldb-11 && sudo ln -s /usr/bin/lldb-vscode-11 /usr/bin/lldb-vscode"
  tag = ["nvim,"]
  output = ""

[[snippets]]
  description = "Increase instances of allowed max user_instances open files for the file watcher"
  command = "sudo sysctl fs.inotify.max_user_instances=8192"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Launch program on file change. In this case kubectl apply"
  command = "/usr/bin/ls *.yaml | entr -s kubectl apply -f"
  tag = ["kubectl", "linux"]
  output = ""

[[snippets]]
  description = "Show colorized directory tree 1 level deep with less"
  command = "tree -LC 2 --si --sort name | less"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Generate simple git changelog"
  command = "git log --pretty=\"- %s\" | grep -v Merge"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "sound setup"
  command = "alsamixer"
  output = ""

[[snippets]]
  description = "Link to gifcap record gifs from screen"
  command = "xdg-open https://gifcap.dev/"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Copy files found in a directory tree to another directory including subdirectories"
  command = "fd <file=README.md> | cpio -pdm <destination=~/dev>"
  tag = ["linux,", "terminal"]
  output = ""

[[snippets]]
  description = "Update all global cargo and go packages"
  command = "__global_updates.sh"
  tag = ["rust", "go", "linux"]
  output = ""

[[snippets]]
  description = "git synchronize local fork origin with remote upstream"
  command = "git merge upstream/master"
  output = ""

[[snippets]]
  description = "Link to chrontab expression generator"
  command = "xdg-open https://crontab-generator.org/"
  tag = ["chron", "link", "linux"]
  output = ""

[[snippets]]
  description = "interactive svg reference"
  command = "xgd-open https://fffuel.co/sssvg/"
  tag = ["web,", "svg"]
  output = ""

[[snippets]]
  description = "Update managed resources deletion policy to orphan on an active cluster"
  command = "kubectl patch $(kubectl get managed -o name) -p '{\"spec\": {\"deletionPolicy\":\"Orphan\"}}' --type=merge"
  tag = ["kubectl,", "crossplane"]
  output = ""

[[snippets]]
  description = "Link to resolving issue when the gcloud user does not have access to service account ..."
  command = "xdg-open https://stackoverflow.com/questions/40367866/gcloud-the-user-does-not-have-access-to-service-account-default"
  tag = ["gcloud", "gcp", "link"]
  output = ""

[[snippets]]
  description = "List configuration file of a service"
  command = "systemctl cat SVC"
  tag = ["linux,", "systemd,", "service"]
  output = ""

[[snippets]]
  description = "cleanup journalctl old logs"
  command = "sudo journalctl --vacuum-size=10M"
  output = ""

[[snippets]]
  description = "Link to bash pitfalls"
  command = "xdg-open http://mywiki.wooledge.org/BashPitfalls"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Add current directory to LXC container mount directory"
  command = "lxc config device add ubuntu src disk source=$(pwd) path=/src"
  tag = ["LXC,", "linux"]
  output = ""

[[snippets]]
  description = "copy your public key to your server"
  command = "ssh-copy-id remote_username@server_ip_address"
  tag = ["linux,", "ssh"]
  output = ""

[[snippets]]
  description = "transpose text"
  command = "datamash"
  output = ""

[[snippets]]
  description = "Alacritty, show key code for setting up alacritty key mappings"
  command = "showkey -a"
  output = ""

[[snippets]]
  description = "Concatenate various files including file name"
  command = "tail -n +1 file1 file2"
  output = ""

[[snippets]]
  description = "Edit tmuxinator zsh completion script"
  command = "nvim /home/decoder/.oh-my-zsh/plugins/tmuxinator/_tmuxinator"
  output = ""

[[snippets]]
  description = "Link to ec2 instances"
  command = "xdg-open https://aws.amazon.com/ec2/instance-types/"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Vim/Nvim power of g"
  command = "xdg-open \"https://vim.fandom.com/wiki/Power_of_g\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to write blogs with AI"
  command = "xdg-open \"https://cowriter.org/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Show currently installed nvida graphics driver"
  command = "dkms status | grep -i nvidia"
  output = ""

[[snippets]]
  description = "Swap to nvidia graphics mode after nvidia driver update when the update was wrong"
  command = "sudo system76-power graphics"
  output = ""

[[snippets]]
  description = "Link to youtbe"
  command = "xdg-open \"https://www.youtube.com/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Compare diff files listing ls between two folders"
  command = "diff -rq folder1 folder2 | grep -E 'Only in|differ'"
  output = ""

[[snippets]]
  description = "Check where funcion or command is located"
  command = "type -a funcion"
  output = ""

[[snippets]]
  description = "Link to Mason registry of LSPs, DAPs, etc"
  command = "xdg-open \"https://mason-registry.dev/registry/list\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "List all pending tasks from taskwarrior for a given project"
  command = "task project.is:<project=perf> status:pending export | jq -r '.[] | \"- [ ] \" + .description'"
  output = ""

[[snippets]]
  description = "Link to taskwarrior using dates effectively"
  command = "xdg-open \"https://taskwarrior.org/docs/using_dates/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "List all registered zle commands zsh shell"
  command = "zle -al"
  output = ""

[[snippets]]
  description = "Extract kubeconfig from secret"
  command = "KUBECONFIG=$(kubectl get secret <secret=3d82d95e-a985-4a2c-81a6-4b5bb2b2571f-aks> -n upbound-system -o jsonpath='{.data.kubeconfig}' | base64 --decode)"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "Link to call <plug> command from lua"
  command = "xdg-open \"https://www.reddit.com/r/neovim/comments/t9l75z/call_plugcommands_with_luaapi/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Github actions built in variables"
  command = "xdg-open \"https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Git find commit where branch was created from main"
  command = "git merge-base main HEAD"
  output = ""

[[snippets]]
  description = "Link to AutoKey Wiki Documentation"
  command = "xdg-open \"https://github.com/autokey/autokey/wiki\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Rust and Neovim - A Thorough Guide and Walkthrough"
  command = "xdg-open \"https://rsdlt.github.io/posts/rust-nvim-ide-guide-walkthrough-development-debug/#why-neovim-for-rust-development\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Conditionally show function in shell only if in git repo"
  command = "xdg-open \"https://gist.github.com/Piotr1215/41c4670cd9d282683613a3338123f3c4\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Print out all the shell commands, zsh, commands."
  command = "whence -vm \"*\""
  output = ""

[[snippets]]
  description = "Update default programs settings"
  command = "sudo update-alternatives --get-selections"
  output = ""

[[snippets]]
  description = "Link to FL0 Deploy backend applications and databases in minutes"
  command = "xdg-open \"https://www.fl0.com/?ref=producthunt\""
  tag = ["deploy", "backend", "databases", "link"]
  output = ""

[[snippets]]
  description = "Create file and direcotry structure in the same time"
  command = "install -D /dev/null path/to/file"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Link to MPV Keyboard Shortcuts - Make Tech Easier — Mozilla Firefox"
  command = "xdg-open \"https://www.maketecheasier.com/cheatsheet/mpv-keyboard-shortcuts/\""
  tag = ["mpv", "media", "linux", "link"]
  output = ""

[[snippets]]
  description = "up cli build xpkg package ignoring workflow files"
  command = "up xpkg build --ignore=\".github/workflows/*.yaml,.github/workflows/*.yml,examples/*.yaml,.work/uptest-datasource.yaml\""
  tag = ["up", "cli"]
  output = ""

[[snippets]]
  description = "taskwarrior run task action with debugging when developing hooks"
  command = "task rc.debug.hooks=2"
  tag = ["taskwarrior"]
  output = ""

[[snippets]]
  description = "Get all package pkg type resources and print kubeclt get"
  command = "for resource in $(kubectl api-resources | grep pkg | awk '{print $1}'); do echo \"Resource: $resource\"; kubectl get \"$resource\"; echo; done"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "Show charecter codes for each key press"
  command = "xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf \"%-3s %s\\n\", $5, $8 }'"
  output = ""

[[snippets]]
  description = "Link to Activate Azure global admin role"
  command = "xdg-open \"https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/ActivationMenuBlade/~/aadmigratedroles\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to PlantUML Themes"
  command = "xdg-open \"https://plantuml.com/theme\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "Link to Nix package versions when needing specific version of the package"
  command = "xdg-open \"https://lazamar.co.uk/nix-versions/\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "crossplane functions remove development annotation from selected function"
  command = "yq eval -i 'select(.kind == \"Function\" and .metadata.name == \"<function-name=function-auto-ready>\").metadata.annotations |= del(.[\"render.crossplane.io/runtime\"])' <function-file=functions.yaml>"
  output = ""

[[snippets]]
  description = "crossplane funcions add development annotation to a funcion"
  command = "yq eval -i '(select(.kind == \"Function\" and .metadata.name == \"<function-name=function-auto-ready>\").metadata.annotations.\"render.crossplane.io/runtime\") = \"Development\"' <function-file=functions.yaml>"
  output = ""

[[snippets]]
  description = "Link to P&T as a Function Gdoc"
  command = "xdg-open \"https://github.com/crossplane/crossplane/blob/863ff6c2f53af47424dab941dbef83ca12e7d74f/design/design-doc-composition-functions.md#patch-and-transform-as-a-function\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Writing Crossplane Composition Function"
  command = "xdg-open \"https://youtu.be/otwg-bO757A\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Write Go Function"
  command = "xdg-open \"https://docs.crossplane.io/knowledge-base/guides/write-a-composition-function-in-go/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "killercoda concatenate all workshop files into single content sorted markdown file"
  command = "(cat intro.md; find . -maxdepth 2 -name 'step*.md' | sort -V | xargs cat; cat finish.md) > workshop.md"
  tag = ["killercoda"]
  output = ""

[[snippets]]
  description = "kubectl get all latest events sorted by timestamp and with custom columns"
  command = "kubectl get events --all-namespaces --field-selector type=Warning -o custom-columns=TIME:.lastTimestamp,NAMESPACE:.metadata.namespace,NAME:.involvedObject.name,KIND:.involvedObject.kind,NODE:.source.host,REASON:.reason,MESSAGE:.message | { read -r header; echo \"$header\"; sort -t ',' -k1,1 }"
  tag = ["kubernetes", "kubectl"]
  output = ""

[[snippets]]
  description = "kubectl get top nodes sorted by cpu utilization"
  command = "kubectl top nodes | { read -r header; echo \"$header\"; sort -k3,3nr; }"
  tag = ["kubernetes", "kubectl"]
  output = ""

[[snippets]]
  description = "Show all non running pods kubectl kubernetes"
  command = "kubectl get pods --all-namespaces --field-selector 'status.phase!=Running' | grep -vi completed"
  tag = ["kubernetes", "kubectl"]
  output = ""

[[snippets]]
  description = "kubectl top usabe by cpu per pod per container kubernetes"
  command = "kubectl top pod --sort-by cpu --containers -A L"
  tag = ["kubernetes", "kubectl"]
  output = ""

[[snippets]]
  description = "docker build image with buildx and load to local images from cache"
  command = "docker build . --progress=plain --tag <tag=runtime> --load"
  tag = ["docker", "buildx"]
  output = ""

[[snippets]]
  description = "Link to My killercoda, katacoda scenarios"
  command = "xdg-open \"https://killercoda.com/creator/scenarios\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "copy openai API key"
  command = "printenv G OPEN | cut -d = -f2 | tr -d '\\n' C"
  output = ""

[[snippets]]
  description = "Link to Crossplane Local Development Instructions"
  command = "xdg-open \"https://github.com/crossplane/crossplane/blob/master/contributing/README.md#establishing-a-development-environment\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "swap to quiet all the obsidian notifications"
  command = "nvim +29 /home/decoder/.local/share/nvim/site/pack/packer/start/obsidian.nvim/lua/obsidian/client.lua"
  output = ""

[[snippets]]
  description = "Link to ollama models"
  command = "xdg-open \"https://ollama.ai/library\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to client-go-examples for kubectl"
  command = "xdg-open \"https://github.com/iximiuz/client-go-examples\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "Link to ngrok dashboard"
  command = "xdg-open \"https://dashboard.ngrok.com/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Check what's listening on specific port and kill it"
  command = "sudo netstat -tulnp | fzf --height 40% --layout=reverse --prompt=\"Select a port: \" | awk '{print $7}' | cut -d'/' -f1 | xargs -r sudo kill"
  output = ""

[[snippets]]
  description = "list all images loaded on a kubernetes cluster"
  command = "kubectl get pods -A -o jsonpath=\"{..image}\" | tr -s '[[:space:]]' '\\n' | sort | uniq -c"
  output = ""

[[snippets]]
  description = "run debug container and attach to a pod's container"
  command = "kubectl -n <namespace=upbound-system> debug -it <pod> --image=ghcr.io/superbrothers/debug --target=<container>"
  tag = ["kubernetes,", "kubectl,", "debug"]
  output = ""

[[snippets]]
  description = "Link to Levels FYI - Job board"
  command = "xdg-open \"https://www.levels.fyi/profile\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "dynamically detec and track mouse position"
  command = "watch -t -n 1 xdotool getmouselocation"
  output = ""

[[snippets]]
  description = "Link to Developer Conferences Agenda"
  command = "xdg-open \"https://developers.events/\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "get kubectl connection to MCP by number"
  command = "kubectl get secret kubeconfig-ctp<ctp_num=1> -n default -o jsonpath='{.data.kubeconfig}' | base64 -d > /tmp/ctp<ctp_num=1>.yaml"
  tag = ["linux", "kubectl"]
  output = ""

[[snippets]]
  description = "Display fancy kubectl kubernetes status"
  command = "{ clear && echo -e \"\\n=== Kubernetes Status ===\\n\" && kubectl get --raw '/healthz?verbose' && kubectl version && kubectl get nodes && kubectl cluster-info; } | grep -z 'Ready\\| ok\\|passed\\|running'"
  output = ""

[[snippets]]
  description = "Link to Resolve Git Merge Conflicts with Neovim and Fugitive!"
  command = "xdg-open \"https://www.youtube.com/watch?v=vpwJ7fqD1CE\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "Link to Upbound marketplace"
  command = "xdg-open \"https://marketplace.upbound.io/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Select header row and regular expression for data rows with awk"
  command = " | awk 'NR == 1 || /REGEX/'"
  output = ""

[[snippets]]
  description = "Install latest crossplane CLI"
  command = "curl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh\" | sh"
  output = ""

[[snippets]]
  description = "Build statically linked crossplane-cli for killercoda scenario"
  command = "CGO_ENABLED=0 go build -a -installsuffix cgo -o crossplane-cli ."
  tag = ["go,", "crossplane"]
  output = ""

[[snippets]]
  description = "Show my public IP address"
  command = "curl ifconfig.me"
  tag = ["IP,", "linux,", "curl"]
  output = ""

[[snippets]]
  description = "List all kubernetes object of an mcp mxe mxp control plane"
  command = "kubectl get object -l crossplane.io/composite=$MCPID -o 'custom-columns=NAME:.metadata.name,FOR:.metadata.annotations.crossplane\\.io/composition-resource-name,SYNCED:.status.conditions[?(@.type==\"Synced\")].status,READY:.status.conditions[?(@.type==\"Ready\")].status'"
  output = ""

[[snippets]]
  description = "List all helm releases of an mcp mxe mxp control plane"
  command = "kubectl get release -l crossplane.io/composite=$MCPID -o 'custom-columns=NAME:.metadata.name,FOR:.metadata.annotations.crossplane\\.io/composition-resource-name,SYNCED:.status.conditions[?(@.type==\"Synced\")].status,READY:.status.conditions[?(@.type==\"Ready\")].status'"
  output = ""

[[snippets]]
  description = "Link to List of neovim nvim text objects"
  command = "xdg-open \"https://github.com/chrisgrieser/nvim-various-textobjs?tab=readme-ov-file#list-of-text-objects\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to ugrep grep replacement"
  command = "xdg-open \"https://ugrep.com/?ref=console.dev#TUI\""
  tag = ["web", "link"]
  output = ""

[[snippets]]
  description = "List system info neofetch uname lscpu df"
  command = "{ printf \"===Neofetch Info===\"; neofetch --stdout; echo \"\\n===Kernel Information===\"; uname -a; echo \"\\n===CPU Information===\"; lscpu; echo \"\\n===Memory Information===\"; free -m; echo \"\\n===Disk Usage Information===\"; df -h; echo \"\\n===PCI Devices===\"; lspci; echo \"\\n===USB Devices===\"; lsusb; } W"
  output = ""

[[snippets]]
  description = "Example kail log with jq filtering"
  command = "kail -p shell-operator -n example-monitor-pods -o json-pretty | jq '. | select(.message.output==\"stdout\") | .message.msg'\\n"
  output = ""

[[snippets]]
  description = "launch helm dashboard on 8080"
  command = "helm dashboard"
  tag = ["helm,", "dashboard"]
  output = ""

[[snippets]]
  description = "Link to brev portal"
  command = "xdg-open \"https://console.brev.dev/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Devbox tools per shell"
  command = "xdg-open \"https://www.jetpack.io/devbox/docs/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Certificates tracing tool"
  command = "xdg-open \"https://crt.sh/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "clenup devbox packages"
  command = "devbox run -- nix store gc"
  output = ""

[[snippets]]
  description = "cleanup nix store packages"
  command = "nix store gc"
  tag = ["nix"]
  output = ""

[[snippets]]
  description = "Link to Algolia dashboard github login"
  command = "xdg-open \"https://dashboard.algolia.com/apps/YVUCIOP9V7/explorer/browse/itcertificationsguide?searchMode=search\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to dca build pipeline on netlify"
  command = "xdg-open \"https://app.netlify.com/teams/piotr1215/builds\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to helm charts repository artifacthub"
  command = "xdg-open \"https://artifacthub.io/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "nslookup and dig records for my site"
  command = "nslookup -type=<record=ns> <subdomain=app.>cloudrumble.net; dig <record=ns> <subdomain=app.>cloudrumble.net"
  output = "DNS records"

[[snippets]]
  description = "Link to local development certificates anchor"
  command = "xdg-open \"https://anchor.dev/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to software licenses expalined in plain english, FOSSA"
  command = "xdg-open \"https://www.tldrlegal.com/\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to zenity autokey implementaton"
  command = "xdg-open \"https://autokey.github.io/api.html\""
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to def list_menu_multi"
  command = "xdg-open \"https://autokey.github.io/_modules/autokey/scripting/dialog_gtk.html#GtkDialog.list_menu_multi\""
  tag = ["web", "link"]
  output = ""

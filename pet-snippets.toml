[[snippets]]
  description = "Change all ocurrances of a string and replace with another string"
  command = "rg <string to replace> --files-with-matches | xargs sed -i 's/<string to replace>/<new string>/g'"
  tag = ["linux", "tools", "grep"]
  output = "Files with string found are changed by replacing the string with a new one"

[[snippets]]
  description = "Check what listenes on a port netstat"
  command = "sudo netstat -pnltu | grep PORT?"
  output = ""

[[snippets]]
  description = "Docker watchtower to update images or all running contianers to their newest versions"
  command = "docker run -d --name Watchtower -e WATCHTOWER_CLEANUP=true -e WATCHTOWER_DEBUG=trued -e WATCHTOWER_INCLUDE_STOPPED=trued -v /var/run/docker.sock:/var/run/docker.sockd containrrr/watchtower"
  output = ""

[[snippets]]
  description = "Open my repo with s plugin for gh CLI"
  command = "gh s -u Piotr1215 | xargs xdg-open"
  output = ""

[[snippets]]
  description = "Show IP address of enp2s0 interface, main address without CIDR"
  command = "ip add show enp3s0 | awk 'NR==3 {print $2}' | cut -d '/' -f 1"
  output = ""

[[snippets]]
  description = "Quickly find kube api server settings."
  command = "ps -ef --forest | grep kube-apiserver | grep <setting=admission-plugins>"
  tag = ["kubernetes", "kubectl"]
  output = ""

[[snippets]]
  description = "Get encoded csr in a proper format"
  command = "cat <csr=myuser.csr> | base64 | tr -d \"\\n\""
  tag = ["kubernetes", "kubectl"]
  output = "Token ready to be pasted in the token field of Kubernetes dashboard for example."

[[snippets]]
  description = "Upgrade single package to newest version"
  command = "sudo apt --only-upgrade install <package>"
  tag = ["linux,", "apt,", "upgrade"]
  output = ""

[[snippets]]
  description = "Locate a file and cd into its location. Defaults to HOME/dev"
  command = "cd \"$(dirname \"$(fd <file> ~/dev | fzf)\")\""
  tag = ["linux,", "command line", "files"]
  output = "Changes directory to the location of found file"

[[snippets]]
  description = "Link to Locate a file and open in a default program"
  command = "xdg-open \"$(fd <file> ~/dev | fzf)\""
  tag = ["linux,", "command line", "files"]
  output = "Opens file in a default program"

[[snippets]]
  description = "Find zsh alias by name, first result usually list file where alias originates from"
  command = "zsh -ixc : 2>&1 | rg <alias=alias>"
  tag = ["linux,", "command line"]
  output = "Top has files with possible aliases"

[[snippets]]
  description = "Copy path to a file to the clipboard"
  command = "xsel <<(readlink -fn"
  output = "Path to a file copied to clipboard"

[[snippets]]
  description = "Find content in a file with ripgrep and open the file in nvim Ctrl+x+e to edit command."
  command = "rg -e \"search\" --files-with-matches | fzf | xargs nvim"
  output = "File opened in nvim"

[[snippets]]
  description = "Copy file name without extension and without new line at the end"
  command = "stat -t FILENAME:NAME-WITH-EXTENSION | cut -d '.' -f1 | xargs echo -n | xclip"
  output = ""

[[snippets]]
  description = "Git show all changes commits to a file, helpful for tracking changes"
  command = "git log --follow --stat -p -- "
  tag = ["git,", "commit"]
  output = ""

[[snippets]]
  description = "Check if branch is eligible for merge"
  command = "git merge --no-commit --no-ff create-mongocla-composite && echo $? && git merge --abort"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Check git status of every directory in repos folder, assuming every directory is a git repo"
  command = "find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git fetch origin && git status -s && echo)' \\;"
  tag = ["git"]
  output = "If a directory is not a git repo, it will be ignored with a warrning and command will continue."

[[snippets]]
  description = "Git check unpushed commits in every local repo folder in dev"
  command = "find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git log --branches --not --remotes && echo)' \\;"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Git list branches not merged with origin main"
  command = "git branch --no-merged origin/main"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Git list branches merged with origin main"
  command = "git branch --merged origin/main"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Find differences between svg files referenced in markdown but not in the dagrams/rendered folder. Run from /arch/platform folder."
  command = "diff <(rg --type \"md\" .svg | cut -d '/' -f 5- | sed 's/.$//' | sort) <(fd .  ./diagrams/rendered | cut -d '/' -f 4- | sort)"
  output = ""

[[snippets]]
  description = "Run this in Browser console to show resolved comments on the PR page"
  command = "document.querySelectorAll('span.Details-content--closed').forEach((e)=>{e.click()})"
  output = ""

[[snippets]]
  description = "Paste content copied from clipboard to a file"
  command = "xclip -o -sel clipboard >> "
  output = ""

[[snippets]]
  description = "Linux fix errors when installing something with apt"
  command = "sudo dpkg --configure -a"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Search git commit history, provide file path ot \"**/name.*\" if unknown"
  command = "git log --all --full-history -- ${0}\"**/name.*\""
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Git find deleted files and show their commits. Helpful when need to undelete a file."
  command = "git log --diff-filter=D --summary | grep -E 'delete|^commit\\s+\\S+'"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "List all make targets"
  command = "make -qp | awk -F':' '/^[a-zA-Z0-9][^$#\\/\\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | sort -u"
  output = ""

[[snippets]]
  description = "Paste yaml from clipboard and apply with kubectl"
  command = "xclip -o -sel clipboard | kubectl apply -f -"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "Fix git gpg failed to sign data on mac"
  command = "export GPG_TTY=$(tty)"
  output = ""

[[snippets]]
  description = "Grep for exact match"
  command = "rg -w "
  output = ""

[[snippets]]
  description = "Generate plantuml diagrams in svg format and place them in the rendered subdirectory"
  command = "java -DPLANTUML_LIMIT_SIZE=8192 -jar /usr/local/bin/plantuml.jar -tsvg ./ -o ./rendered"
  output = ""

[[snippets]]
  description = "Create folder with the current date formatted in day-month-year"
  command = "mkdir $(date +\"%d-%m-%y\")"
  output = ""

[[snippets]]
  description = "Install universal crossplane into upbound-system namespace development branch"
  command = "helm install uxp --namespace upbound-system upbound-stable/universal-crossplane --devel"
  tag = ["crossplane"]
  output = ""

[[snippets]]
  description = "Search git commit history content"
  command = "git log -p --all -G '"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Reformat a file with 1 space between words and 2 spaces between paragraphs. Helpful when limiting text width to 80 for PR reviews"
  command = "fmt -u FILE?"
  output = ""

[[snippets]]
  description = "Create script to run at startup, update rc.local and run this command"
  command = "update-rc.d rc.local defaults 80"
  output = ""

[[snippets]]
  description = "Bash copy last command from history without a new line, meaning don't execute it just output to the terminal"
  command = "fc -ln -1 | tr -d '\\n' | xsel --clipboard"
  output = ""

[[snippets]]
  description = "Link to SSH Cheat Sheet"
  command = "xdg-open https://www.marcobehler.com/guides/ssh-cheat-sheet"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Git compare diff two branches showing only your changes between the main and your branch"
  command = "git diff main...$(git branch | sed -n -e 's/^\\* \\(.*\\)/\\1/p')"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "List all the shell shortcuts"
  command = "bindkey"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "List all installed apt packages"
  command = "sudo dpkg -l"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Tmux cleanly and gracefully kill all tmux open sessions"
  command = "tmux kill-server"
  output = ""

[[snippets]]
  description = "Display fancy kubernetes status including health check"
  command = "{ clear && echo -e \"\\n=== Kubernetes Status ===\\n\" && kubectl get --raw '/healthz?verbose' && kubectl version --short && kubectl get nodes && kubectl cluster-info; \\n} | grep -z 'Ready\\| ok\\|passed\\|running'"
  tag = ["kubectl"]
  output = ""

[[snippets]]
  description = "Link to Vim fix for go files when folds are closed on save"
  command = "xdg-open https://stackoverflow.com/a/55327996"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Apt ubuntu remove ppa from the repositories"
  command = "sudo add-apt-repository --remove ppa:NAME?"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Generate random password and copy to clipboard"
  command = "apg -M SNCL -m 22 | fzf | xsel -ib"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Vim generate ctags exuberant tags"
  command = "ctags -R --exclude=.git--exclude=vendor --exclude=node_modules --exclude=db --exclude=log ."
  tag = ["nvim"]
  output = ""

[[snippets]]
  description = "Link to At reminder times table, formats execution"
  command = "xdg-open https://www.dummies.com/article/technology/computers/operating-systems/linux/how-to-schedule-jobs-in-linux-at-and-crontab-commands-255842/\\#:\\~:text\\=Formats%20for%20the%20at%20Command%20for%20the%20Time%20of%20Execution"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Link to Modify access for a specific user to a file or folder using ACL access control list, setfacl"
  command = "xdg-open https://superuser.com/a/145007"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Modify ACL for decoder"
  command = "setfacl -m u:decoder:rwx"
  output = ""

[[snippets]]
  description = "Link to nvim lua guide"
  command = "xdg-open https://github.com/nanotee/nvim-lua-guide"
  tag = ["link", "nvim"]
  output = ""

[[snippets]]
  description = "Link to neovim folder structure"
  command = "https://github.com/nanotee/nvim-lua-guide#runtime-files"
  tag = ["link,", "nvim"]
  output = ""

[[snippets]]
  description = "Link to bash conditional operators"
  command = "https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#:~:text=6.4%20bash%20conditional%20expressions"
  tag = ["link,", "nvim"]
  output = ""

[[snippets]]
  description = "SSH generate ecdsa key in the ssh folder"
  command = "ssh-keygen -t ecdsa -f ~/.ssh/argo_infra_rsa"
  output = ""

[[snippets]]
  description = "Fix sealed secret error cannot fetch certificate"
  command = "kubectl -n kube-system patch svc sealed-secrets-controller --type='json' -p='[{\"op\": \"remove\", \"path\": \"/spec/ports/0/name\"}, {\"op\": \"replace\", \"path\": \"/spec/ports/0/targetPort\", \"value\":8080}]'"
  output = ""

[[snippets]]
  description = "Link to the taskwarrior possible due date fields"
  command = "xdg-open https://taskwarrior.org/docs/dates/\\#:\\~:text\\=here%20are%20the%20possible%20elements%20of%20rc.dateformat%3A"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Install newest version of up CLI"
  command = "curl -sL \"https://cli.upbound.io\" | sh && sudo mv up /usr/local/bin/"
  tag = ["upbound,", "cli"]
  output = ""

[[snippets]]
  description = "Git copy file from source branch to current branch"
  command = "git checkout ?SOURCE_BRANCH ?PATH_TO_FILE"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "Add GCP official provider to providers cache for LSP to work. Crossplane.yaml must be in the same folder as composition/definition or in the root of the repo."
  command = "up xpkg dep xpkg.upbound.io/upbound/provider-gcp"
  tag = ["crossplane"]
  output = ""

[[snippets]]
  description = "Enable debugging in neovim for rust and go"
  command = "sudo apt install -y lldb-11 && sudo ln -s /usr/bin/lldb-vscode-11 /usr/bin/lldb-vscode"
  tag = ["nvim,"]
  output = ""

[[snippets]]
  description = "Increase instances of allowed max user_instances open files for the file watcher"
  command = "sudo sysctl fs.inotify.max_user_instances=8192"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Launch program on file change. In this case kubectl apply"
  command = "/usr/bin/ls *.yaml | entr -s kubectl apply -f"
  tag = ["kubectl", "linux"]
  output = ""

[[snippets]]
  description = "Show colorized directory tree 1 level deep with less"
  command = "tree -LC 2 --si --sort name | less"
  tag = ["linux"]
  output = ""

[[snippets]]
  description = "Generate simple git changelog"
  command = "git log --pretty=\"- %s\" | grep -v Merge"
  tag = ["git"]
  output = ""

[[snippets]]
  description = "sound setup"
  command = "alsamixer"
  output = ""

[[snippets]]
  description = "Link to gifcap record gifs from screen"
  command = "xdg-open https://gifcap.dev/"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Copy files found in a directory tree to another directory including subdirectories"
  command = "fd <file=README.md> | cpio -pdm <destination=~/dev>"
  tag = ["linux,", "terminal"]
  output = ""

[[snippets]]
  description = "Update all global cargo and go packages"
  command = "__global_updates.sh"
  tag = ["rust", "go", "linux"]
  output = ""

[[snippets]]
  description = "git synchronize local fork origin with remote upstream"
  command = "git merge upstream/master"
  output = ""

[[snippets]]
  description = "Link to chrontab expression generator"
  command = "xdg-open https://crontab-generator.org/"
  tag = ["linux,", "chron"]
  output = ""

[[snippets]]
  description = "interactive svg reference"
  command = "xgd-open https://fffuel.co/sssvg/"
  tag = ["web,", "svg"]
  output = ""

[[snippets]]
  description = "Update managed resources deletion policy to orphan on an active cluster"
  command = "kubectl patch $(kubectl get managed -o name) -p '{\"spec\": {\"deletionPolicy\":\"Orphan\"}}' --type=merge"
  tag = ["kubectl,", "crossplane"]
  output = ""

[[snippets]]
  description = "Link to link to resolving issue when gcloud: The user does not have access to service account ..."
  command = "xdg-open https://stackoverflow.com/questions/40367866/gcloud-the-user-does-not-have-access-to-service-account-default"
  tag = ["link,", "gcp,", "gcloud"]
  output = ""

[[snippets]]
  description = "List configuration file of a service"
  command = "systemctl cat SVC"
  tag = ["linux,", "systemd,", "service"]
  output = ""

[[snippets]]
  description = "cleanup journalctl old logs"
  command = "sudo journalctl --vacuum-size=10M"
  output = ""

[[snippets]]
  description = "Link to bash pitfalls"
  command = "xdg-open http://mywiki.wooledge.org/BashPitfalls"
  tag = ["link"]
  output = ""

[[snippets]]
  description = "Add current directory to LXC container mount directory"
  command = "lxc config device add ubuntu src disk source=$(pwd) path=/src"
  tag = ["LXC,", "linux"]
  output = ""

[[snippets]]
  description = "copy your public key to your server"
  command = "ssh-copy-id remote_username@server_ip_address"
  tag = ["linux,", "ssh"]
  output = ""

[[snippets]]
  description = "Found multiple accounts with the same username 'piotr@upbound.io'"
  command = "az account clear"
  tag = ["azure"]
  output = ""

[[snippets]]
  description = "transpose text"
  command = "datamash"
  output = ""

[[snippets]]
  description = "Alacritty, show key code for setting up alacritty key mappings"
  command = "showkey -a"
  output = ""

[[snippets]]
  description = "Concatenate various files including file name"
  command = "tail -n +1 file1 file2"
  output = ""

[[snippets]]
  description = "Edit tmuxinator zsh completion script"
  command = "nvim /home/decoder/.oh-my-zsh/plugins/tmuxinator/_tmuxinator"
  output = ""

[[snippets]]
  description = "Link to ec2 instances"
  command = "xdg-open https://aws.amazon.com/ec2/instance-types/"
  output = ""

[[snippets]]
  description = "Link to chat gtp 4 link"
  command = "xdg-open \"https://chat.openai.com/chat?model=gpt-4\""
  output = ""

[[snippets]]
  description = "Link to create diagrams with keyboard"
  command = "xdg-open \"https://vicalc.io/\""
  output = ""

[[snippets]]
  description = "Link to Vim/Nvim power of g"
  command = "xdg-open \"https://vim.fandom.com/wiki/Power_of_g\""
  output = ""

[[snippets]]
  description = "Link to write blogs with AI"
  command = "xdg-open \"https://cowriter.org/\""
  output = ""

[[snippets]]
  description = "Shod currently installed nvida graphics driver"
  command = "dkms status | grep -i nvidia"
  output = ""

[[snippets]]
  description = "Swap to nvidia graphics mode after nvidia driver update when the update was wrong"
  command = "sudo system76-power graphics"
  output = ""

[[snippets]]
  description = "extract json file structure from a sample file"
  command = "jq 'def schema: \\n    if type == \"array\" then \\n        (first | schema) \\n    elif type == \"object\" then \\n        with_entries(.value |= schema) \\n    else \\n        \"type: \" + type \\n    end; schema' conversations.json"
  output = ""

[[snippets]]
  description = "Link to youtbe"
  command = "xdg-open \"https://www.youtube.com/\""
  output = ""

[[snippets]]
  description = "Link to fix chatGPT neovim submit command"
  command = "xdg-open \"https://github.com/jackMort/ChatGPT.nvim/issues/105#issuecomment-1504718730\""
  output = ""

[[snippets]]
  description = "Set new git remote url"
  command = "git remote set-url origin REPOLINK"
  output = ""

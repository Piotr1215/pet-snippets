[[snippets]]
  description = "Change all ocurrances of a string and replace with another string"
  command = "rg <string to replace> --files-with-matches | xargs sed -i 's/<string to replace>/<new string>/g'"
  tag = ["linux", "tools", "grep"]
  output = "Files with string found are changed by replacing the string with a new one"

[[snippets]]
  description = "Check what listenes on a port netstat"
  command = "sudo netstat -pnltu | grep PORT?"
  output = ""

[[snippets]]
  description = "Docker watchtower to update images or all running contianers to their newest versions"
  command = "docker run -d --name Watchtower -e WATCHTOWER_CLEANUP=true -e WATCHTOWER_DEBUG=trued -e WATCHTOWER_INCLUDE_STOPPED=trued -v /var/run/docker.sock:/var/run/docker.sockd containrrr/watchtower"
  output = ""

[[snippets]]
  description = "List all repos with BLOG label"
  command = "gh repo list --limit 100 --topic blog"
  output = ""

[[snippets]]
  description = "List all repos with WIP label"
  command = "gh repo list --limit 100 --topic wip"
  output = ""

[[snippets]]
  description = "Open my repo with s plugin for gh CLI"
  command = "gh s -u Piotr1215 | xargs xdg-open"
  output = ""

[[snippets]]
  description = "Search for png and open, FZF, PNG, pictures, search"
  command = "fd --extension=png <search:k8s> | fzf | xargs xdg-open"
  output = ""

[[snippets]]
  description = "Show IP address of enp2s0 interface, main address without CIDR"
  command = "ip add show enp3s0 | awk 'NR==3 {print $2}' | cut -d '/' -f 1"
  output = ""

[[snippets]]
  description = "Quickly find kube api server settings."
  command = "ps -ef --forest | grep kube-apiserver | grep <setting=admission-plugins>"
  tag = ["kubernetes", "kubectl"]
  output = ""

[[snippets]]
  description = "Get encoded csr in a proper format"
  command = "cat <csr=myuser.csr> | base64 | tr -d \"\\n\""
  tag = ["kubernetes", "kubectl"]
  output = "Token ready to be pasted in the token field of Kubernetes dashboard for example."

[[snippets]]
  description = "Upgrade single package to newest version"
  command = "sudo apt --only-upgrade install <package>"
  tag = ["linux,", "apt,", "upgrade"]
  output = ""

[[snippets]]
  description = "Locata a file and cd into its location. Defaults to HOME/dev"
  command = "cd \"$(dirname \"$(fd <file> ~/dev | fzf)\")\""
  tag = ["linux,", "command line", "files"]
  output = "Changes directory to the location of found file"

[[snippets]]
  description = "Locate a file and open in a default program"
  command = "xdg-open \"$(fd <file> ~/dev | fzf)\""
  tag = ["linux,", "command line", "files"]
  output = "Opens file in a default program"

[[snippets]]
  description = "Locate a file and open in vim"
  command = "nvim \"$(fd <file> ~/dev | fzf)\""
  tag = ["linux,", "command line", "files"]
  output = "Opens file in vim"

[[snippets]]
  description = "Run crossplane mongodbatlas provider"
  command = "go run cmd/provider/main.go --terraform-version 1.0.11 --terraform-provider-source terraform-providers/mongodbatlas --terraform-provider-version 1.2.0 -d"
  tag = ["crossplane"]
  output = "Runs crossplane provider against active cluster"

[[snippets]]
  description = "Find zsh alias by name, first result usually list file where alias originates from"
  command = "zsh -ixc : 2>&1 | rg <alias=alias>"
  tag = ["linux,", "command line"]
  output = "Top has files with possible aliases"

[[snippets]]
  description = "Copy path to a file to the clipboard"
  command = "xsel <<(readlink -fn"
  output = "Path to a file copied to clipboard"

[[snippets]]
  description = "Find content in a file with ripgrep and open the file in nvim"
  command = "rg -e <\"search\"> --files-with-matches | fzf | xargs nvim"
  output = "File opened in nvim"

[[snippets]]
  description = "Copy file name without extension and without new line at the end"
  command = "stat -t <filename:name-with-extension> | cut -d '.' -f1 | xargs echo -n | xclip"
  output = ""

[[snippets]]
  description = "Git show all changes commits to a file, helpful for tracking changes"
  command = "git log --follow --stat -p -- "
  tag = ["git,", "commit"]
  output = ""

[[snippets]]
  description = "Check if branch is eligible for merge"
  command = "git merge --no-commit --no-ff create-mongocla-composite && echo $? && git merge --abort"
  output = ""

[[snippets]]
  description = "Check git status of every directory in repos folder, assuming every directory is a git repo"
  command = "find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git fetch origin && git status -s && echo)' \\;"
  output = ""

[[snippets]]
  description = "Git check unpushed commits in every local repo folder in dev"
  command = "find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo {} && cd {} && git log --branches --not --remotes && echo)' \\;"
  output = ""

[[snippets]]
  description = "Git list branches not merged with upstream main"
  command = "git branch --no-merged upstream/main"
  output = ""

[[snippets]]
  description = "Git list branches merged with origin main"
  command = "git branch --merged origin/main"
  output = ""

[[snippets]]
  description = "Find differences between svg files referenced in markdown but not in the dagrams/rendered folder. Run from /arch/platform folder."
  command = "diff <(rg --type \"md\" .svg | cut -d '/' -f 5- | sed 's/.$//' | sort) <(fd .  ./diagrams/rendered | cut -d '/' -f 4- | sort)"
  output = ""

[[snippets]]
  description = "Install new version of coc.nvim after PluginUpdate"
  command = "cd /home/decoder/.vim/bundle/coc.nvim && yarn install && cd"
  output = ""

[[snippets]]
  description = "Run this in Browser console to show resolved comments on the PR page"
  command = "document.querySelectorAll('span.Details-content--closed').forEach((e)=>{e.click()})"
  output = ""

[[snippets]]
  description = "Paste content copied from clipboard to a file"
  command = "xclip -o -sel clipboard >> "
  output = ""

[[snippets]]
  description = "Linux fix errors when installing something with apt"
  command = "sudo dpkg --configure -a"
  output = ""

[[snippets]]
  description = "Search git commit history, provide file path ot \"**/name.*\" if unknown"
  command = "git log --all --full-history -- ${0}\"**/name.*\""
  output = ""

[[snippets]]
  description = "Git find deleted files and show their commits. Helpful when need to undelete a file."
  command = "git log --diff-filter=D --summary | grep -E 'delete|^commit\\s+\\S+'"
  output = ""

[[snippets]]
  description = "List all make targets"
  command = "make -qp | awk -F':' '/^[a-zA-Z0-9][^$#\\/\\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | sort -u"
  output = ""

[[snippets]]
  description = "Upbound MCP, create package-pull-secret token for authentication with the package pulling source"
  command = "kubectl create secret docker-registry package-pull-secret --namespace=${NAMESPACE} --docker-server=xpkg.upbound.io --docker-username=${UPBOUND_ROBOT_ACCESS_ID} --docker-password=${UPBOUND_ROBOT_TOKEN}"
  output = ""

[[snippets]]
  description = "Paste yaml from clipboard and apply with kubectl"
  command = "xclip -o -sel clipboard | kubectl apply -f -"
  output = ""

[[snippets]]
  description = "Fix git gpg failed to sign data on mac"
  command = "export GPG_TTY=$(tty)"
  output = ""

[[snippets]]
  description = "Copy a sample index.html to GCP storage bucket"
  command = "gsutil cp index.html gs://bucket-demo-hour"
  output = ""

[[snippets]]
  description = "Grep for exact match"
  command = "rg -w "
  output = ""

[[snippets]]
  description = "Generate plantuml diagrams in svg format and place them in the rendered subdirectory"
  command = "java -DPLANTUML_LIMIT_SIZE=8192 -jar /usr/local/bin/plantuml.jar -tsvg ./ -o ./rendered"
  output = ""

[[snippets]]
  description = "Create folder with the current date formatted in day-month-year"
  command = "mkdir $(date +\"%d-%m-%y\")"
  output = ""

[[snippets]]
  description = "Install universal crossplane into upbound-system namespace development branch"
  command = "helm install uxp --namespace upbound-system upbound-stable/universal-crossplane --devel"
  output = ""

[[snippets]]
  description = "Search git commit history content"
  command = "git grep <search> $(git rev-list --all)"
  output = ""

[[snippets]]
  description = "Reformat a file with 1 space between words and 2 spaces between paragraphs"
  command = "fmt -u notes-upbound.md"
  output = ""

[[snippets]]
  description = "Create script to run at startup, update rc.local and run this command"
  command = "update-rc.d rc.local defaults 80"
  output = ""

[[snippets]]
  description = "Bash copy last command from history without a new line, meaning don't execute it just output to the terminal"
  command = "fc -ln -1 | tr -d '\\n' | xsel --clipboard"
  output = ""

[[snippets]]
  description = "SSH Cheat Sheet"
  command = "xdg-open https://www.marcobehler.com/guides/ssh-cheat-sheet"
  output = ""

[[snippets]]
  description = "Get current history and remove new line that bash might add"
  command = "echo \"history\" | bash -i 2>/dev/null | sed -e 's/\\x1b\\[.//g'"
  output = ""

[[snippets]]
  description = "Git compare diff two branches showing only your changes between the main and your branch"
  command = "git diff main...$(git branch | sed -n -e 's/^\\* \\(.*\\)/\\1/p')"
  output = ""

[[snippets]]
  description = "List all the shell shortcuts"
  command = "bindkey"
  output = ""

[[snippets]]
  description = "List all installed apt packages"
  command = "sudo dpkg -l"
  output = ""

[[snippets]]
  description = "Tmux cleanly and gracefully kill all tmux open sessions"
  command = "tmux kill-server"
  output = ""
